"use client";
import React, { useState, useEffect } from "react";
import {
  Typography,
  Card,
  Form,
  Button,
  message,
  Steps,
  Divider,
  Spin,
  Input,
  Result,
} from "antd";
import { useUserState } from "@/providers/user-provider";
import { useFitnessPathActions } from "@/providers/fitnesspath/fitness-provider";
import ActivityTypes from "../../components/path-sign-up/fitness/activity-ai";
import ExercisePlanBuilder from "../../components/path-sign-up/fitness/exercise-plan";

const { Title, Paragraph } = Typography;

interface FitnessPathFormValues {
  name: string;
  description: string;
}

const StepBasedFitnessPlanner: React.FC<{
  personId: string;
}> = ({ personId }) => {
  const { currentUser } = useUserState();
  const { createFitnessPath } = useFitnessPathActions();
  const [form] = Form.useForm<FitnessPathFormValues>();

  const [current, setCurrent] = useState(0);
  const [submitting, setSubmitting] = useState(false);
  const [basicInfoComplete, setBasicInfoComplete] = useState(false);
  const [activityTypes, setActivityTypes] = useState([]);
  const [planData, setPlanData] = useState(null);
  const [planCreated, setPlanCreated] = useState(false);

  // Handle activity types being generated by the ActivityTypes component
  const handleActivityTypesGenerated = (generatedActivityTypes) => {
    console.log("Generated activity types:", generatedActivityTypes);
    const formatted = generatedActivityTypes.map((activity) => ({
      id: activity.id,
      content: `${activity.category} (Intensity: ${activity.intensityLevel})`,
      category: activity.category,
      intensityLevel: activity.intensityLevel,
      description: activity.description,
    }));
    console.log("Formatted activity types:", formatted);
    setActivityTypes(formatted);
  };

  // Handle basic info form submission
  const handleBasicInfoSubmit = async (values: FitnessPathFormValues) => {
    console.log("clicked", personId);
    if (!personId) {
      message.error("Person ID is missing. Please log in again.");
      return;
    }

    setSubmitting(true);

    try {
      const fitnessPath = {
        title: values.name,
        description: values.description,
        stepEntryIds: [],
        weightEntryIds: [],
        activityIds: [],
        personId: personId,
      };

      // Create the basic fitness path first
      await createFitnessPath(fitnessPath);
      setBasicInfoComplete(true);

      message.success("Basic information saved!");
      setCurrent(1);
    } catch (error) {
      console.error("Error creating fitness path:", error);
      message.error("Failed to create fitness path.");
    } finally {
      setSubmitting(false);
    }
  };

  // Handle exercise plan submission
  const handleExercisePlanSubmit = (planData) => {
    setPlanData(planData);
    message.success("Exercise plan created!");
    setCurrent(3);
    setPlanCreated(true);
  };

  // Define the steps
  const steps = [
    {
      title: "Basic Info",
      content: (
        <Card>
          <Form form={form} layout="vertical" onFinish={handleBasicInfoSubmit}>
            <Form.Item
              name="name"
              label="Fitness Path Name"
              rules={[
                {
                  required: true,
                  message: "Please enter a name for your fitness path",
                },
              ]}
            >
              <Input placeholder="e.g., Summer Shred 2025" />
            </Form.Item>

            <Form.Item
              name="description"
              label="Description"
              rules={[
                {
                  required: true,
                  message: "Please describe your fitness path",
                },
              ]}
            >
              <Input.TextArea
                placeholder="Describe your fitness goals and what you want to achieve"
                rows={4}
              />
            </Form.Item>

            <Form.Item>
              <Button type="primary" htmlType="submit" loading={submitting}>
                Continue
              </Button>
            </Form.Item>
          </Form>
        </Card>
      ),
    },
    {
      title: "Personal Profile",
      content: (
        <Card>
          <ActivityTypes
            onActivityTypesGenerated={handleActivityTypesGenerated}
          />
          <div style={{ marginTop: 16, textAlign: "right" }}>
            <Button onClick={() => setCurrent(0)} style={{ marginRight: 8 }}>
              Previous
            </Button>
            <Button
              type="primary"
              onClick={() => {
                if (activityTypes.length > 0) {
                  setCurrent(2);
                } else {
                  message.warning("Please generate activity types first");
                }
              }}
              disabled={activityTypes.length === 0}
            >
              Continue
            </Button>
          </div>
        </Card>
      ),
    },
    {
      title: "Exercise Plan",
      content: (
        <Card>
          <ExercisePlanBuilder
            availableActivities={activityTypes}
            personId={personId}
            onPlanSubmit={handleExercisePlanSubmit}
          />
          <div style={{ marginTop: 16, textAlign: "right" }}>
            <Button onClick={() => setCurrent(1)} style={{ marginRight: 8 }}>
              Previous
            </Button>
          </div>
        </Card>
      ),
    },
    {
      title: "Completed",
      content: (
        <Result
          status="success"
          title="Your Fitness Plan Has Been Created!"
          subTitle="You can now start following your personalized fitness journey."
          extra={[
            <Button type="primary" key="dashboard">
              Go to Dashboard
            </Button>,
            <Button
              key="newPlan"
              onClick={() => {
                form.resetFields();
                setActivityTypes([]);
                setPlanData(null);
                setPlanCreated(false);
                setCurrent(0);
              }}
            >
              Create Another Plan
            </Button>,
          ]}
        />
      ),
    },
  ];

  return (
    <div style={{ maxWidth: 1200, margin: "0 auto", padding: "24px 16px" }}>
      <Card className="welcome-card" style={{ marginBottom: 24 }}>
        <Title level={2}>
          ðŸš€ Welcome, {currentUser?.name || "Fitness Enthusiast"}
        </Title>
        <Paragraph>
          Ready to create your personalized fitness journey? Follow these steps
          to build your perfect plan.
        </Paragraph>
      </Card>

      <Steps
        current={current}
        items={steps.map((item) => ({ key: item.title, title: item.title }))}
      />

      <Divider />

      <div style={{ marginTop: 24 }}>{steps[current].content}</div>
    </div>
  );
};

export default StepBasedFitnessPlanner;
